{"paragraphs":[{"text":"%dep\n\n// https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-kafka-0-10\n\n//z.load(\"org.apache.spark:spark-streaming-kafka-0-10_2.12:jar:2.4.4\")\n\nz.load(\"org.apache.spark:spark-streaming-kafka-0-10_2.11:jar:2.3.2\")\n\nz.load(\"/home/ubuntu/stockprediction/common/target/stockprediction-common.jar\")","user":"anonymous","dateUpdated":"2020-09-01T14:17:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@270e5183\n"}]},"apps":[],"jobName":"paragraph_1597169312067_684263854","id":"20200811-180832_1102035084","dateCreated":"2020-08-11T18:08:32+0000","dateStarted":"2020-09-01T14:17:06+0000","dateFinished":"2020-09-01T14:17:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:368"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class CC1(\n   @BeanProperty\n   @SpaceId\n   var id: String,\n   \n   @BeanProperty\n   var label: String,\n   \n   @BeanProperty\n   var rtns: Double,\n   \n   @BeanProperty\n   var fiveDayGL: Double,\n   \n   @BeanProperty\n   var close: Double,\n   \n   @BeanProperty\n   var rsi2: Double,\n   \n   @BeanProperty\n   var rsiClost3: Double,\n   \n   @BeanProperty\n   var percentageRank100: Double,\n   \n   @BeanProperty\n   var rsiStreak2: Double,\n   \n   @BeanProperty\n   var crsi: Double\n) {\n   def this() = this(null, null, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0)\n}","user":"anonymous","dateUpdated":"2020-09-01T14:17:16+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@588e0cfd\n"}]},"apps":[],"jobName":"paragraph_1597073832071_570205719","id":"20170410-120320_358974377","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-09-01T14:17:16+0000","dateFinished":"2020-09-01T14:17:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369"},{"text":"%define\n/*\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class predictions(\n   @BeanProperty\n   @SpaceId\n   var id: String,\n   \n   @BeanProperty\n   var label: String,\n   \n   @BeanProperty\n   var cluster: Int\n) {\n   def this() = this(null, null, -1)\n}\n*/","user":"anonymous","dateUpdated":"2020-09-01T14:17:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832076_-914129403","id":"20170412-093816_568971003","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-09-01T14:17:20+0000","dateFinished":"2020-09-01T14:17:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:370","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res2: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4ce09477\n"}]}},{"text":"%define\n\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.clustering.KMeansModel\n\nobject PredictionObject {\n\ndef doPrediction(s:String):Unit = {\n    val arr = s.split(\",\")\n\n    val id = arr(0) + ':' + arr(1)\n          \n    //val modelPrediction = kMeansModel.predict(Vectors.dense(arr(3).toDouble, arr(4).toDouble, arr(5).toInt, arr(6).toDouble, arr(7).toDouble))\n    \n    //val myKMeansModel = sc.read.grid(\"org.insightedge.spark.mllib.MLInstance\")\n    \n    //val p = predictions(id, arr(2), modelPrediction)\n\n    //mylist += s\n    \n    //sc.parallelize(l).saveToGrid()\n    // write prediction object to grid\n}\n}","user":"anonymous","dateUpdated":"2020-09-01T14:17:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res3: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@33144828\n"}]},"apps":[],"jobName":"paragraph_1597257246296_-745115673","id":"20200812-183406_1310117551","dateCreated":"2020-08-12T18:34:06+0000","dateStarted":"2020-09-01T14:17:23+0000","dateFinished":"2020-09-01T14:17:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:371"},{"text":"%spark\n\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n\n//Change space name here if not working with default\nval ieConfig = new InsightEdgeConfig(\"demo\")\n\nsc.initializeInsightEdgeContext(ieConfig)","user":"anonymous","dateUpdated":"2020-09-01T14:17:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\nieConfig: org.insightedge.spark.context.InsightEdgeConfig = InsightEdgeConfig(demo,None,None)\nres0: org.apache.spark.SparkContext = org.apache.spark.SparkContext@7a366b08\n"}]},"apps":[],"jobName":"paragraph_1597074407903_-1457338629","id":"20200810-154647_294582819","dateCreated":"2020-08-10T15:46:47+0000","dateStarted":"2020-09-01T14:17:27+0000","dateFinished":"2020-09-01T14:17:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:372"},{"text":"%spark\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.clustering.KMeans\nimport org.apache.spark.sql.functions._\n\n// load file and remove header\n//val data = sc.textFile(\"data/spykmeans.csv\")\nval data = sc.textFile(\"/home/ubuntu/stockprediction/v15.2/data/spykmeans.csv\")\nval header = data.first\nval rows = data.filter(l => l != header)\n\n// comma separator split\nval allSplit = rows.map(line => line.split(\",\"))\n\n// map parts to case class\nval allDataCC1RDD = allSplit.map( p => CC1( p(0).toString, p(1).toString, p(2).trim.toDouble, p(3).trim.toDouble, p(4).trim.toDouble, p(5).trim.toDouble, p(6).trim.toDouble, p(7).trim.toDouble, p(8).trim.toDouble, p(9).trim.toDouble))\nallDataCC1RDD.cache()\nallDataCC1RDD.saveToGrid()\n\nval vectors = allDataCC1RDD.map(cc1 => Vectors.dense(cc1.rsi2, cc1.rsiClost3, cc1.percentageRank100, cc1.rsiStreak2, cc1.crsi))\nvectors.cache()","user":"anonymous","dateUpdated":"2020-09-01T14:17:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.clustering.KMeans\nimport org.apache.spark.sql.functions._\ndata: org.apache.spark.rdd.RDD[String] = /home/ubuntu/stockprediction/v15.2/data/spykmeans.csv MapPartitionsRDD[3] at textFile at <console>:39\nheader: String = ID,LABEL,RTN5,FIVE_DAY_GL,CLOSE,RSI2,RSI_CLOSE_3,PERCENT_RANK_100,RSI_STREAK_2,CRSI\nrows: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[4] at filter at <console>:41\nallSplit: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[5] at map at <console>:39\nallDataCC1RDD: org.apache.spark.rdd.RDD[CC1] = MapPartitionsRDD[6] at map at <console>:39\nres1: allDataCC1RDD.type = MapPartitionsRDD[6] at map at <console>:39\nvectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[7] at map at <console>:39\nres3: vectors.type = MapPartitionsRDD[7] at map at <console>:39\n"}]},"apps":[],"jobName":"paragraph_1597073832076_1310322040","id":"20170410-120337_1945504297","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-09-01T14:17:53+0000","dateFinished":"2020-09-01T14:17:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:373"},{"text":"%spark\n\n//KMeans model with 2 clusters and 20 iterations\nval kMeansModel = KMeans.train(vectors, 2, 20)","user":"anonymous","dateUpdated":"2020-09-01T14:18:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"kMeansModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@1b1f948f\n"}]},"apps":[],"jobName":"paragraph_1597073832077_-1487622859","id":"20170412-090847_2144991798","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-09-01T14:18:03+0000","dateFinished":"2020-09-01T14:18:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:374"},{"text":"%spark\n\nkMeansModel.saveToGrid(sc, \"KMeansModel\")","user":"anonymous","dateUpdated":"2020-09-01T14:18:07+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1597073832077_-32987656","id":"20170412-091647_220495996","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-09-01T14:18:07+0000","dateFinished":"2020-09-01T14:18:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:375"},{"text":"%spark\nimport com.gigaspaces.demo.common.Prediction\n\n//Print the center of each cluster\nkMeansModel.clusterCenters.foreach(println)\n\n// Get the prediction from the model with the ID so we can link them back to other information\nval predictionsRDD = allDataCC1RDD.map{cc1 => new Prediction (cc1.id, cc1.label, kMeansModel.predict(Vectors.dense(cc1.rsi2, cc1.rsiClost3, cc1.percentageRank100, cc1.rsiStreak2, cc1.crsi) ))}","user":"anonymous","dateUpdated":"2020-08-28T17:24:45+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832078_-499705927","id":"20170410-120451_720413167","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T17:24:45+0000","dateFinished":"2020-08-28T17:24:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:376"},{"text":"%spark\n\npredictionsRDD.take(5).foreach(println)\npredictionsRDD.saveToGrid()","user":"anonymous","dateUpdated":"2020-08-28T17:24:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832078_-1195980962","id":"20170412-092335_2116878461","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T17:24:49+0000","dateFinished":"2020-08-28T17:24:50+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:377"},{"text":"%spark\n\nval predict1 = kMeansModel.predict(Vectors.dense(91.5775, 81.5, 84,73.2, 79.59))\nval predict2 = kMeansModel.predict(Vectors.dense(11.5775, 61.5, 84,73.2, 79.59))\nval predict3 = kMeansModel.predict(Vectors.dense(11.5775, 61.5, 14,73.2, 19.59))","user":"anonymous","dateUpdated":"2020-08-28T17:24:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832079_1770109427","id":"20170410-131601_1354198764","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T17:24:56+0000","dateFinished":"2020-08-28T17:24:56+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"text":"%spark\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010._\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\nimport org.apache.spark.streaming.StreamingContext\nimport org.apache.spark.streaming.Seconds\nimport scala.collection.mutable.ListBuffer\n\nimport org.apache.spark.sql.SparkSession\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.clustering.KMeans\nimport org.apache.spark.mllib.clustering.KMeansModel\n\n\nval streamingContext =  StreamingContext.getActiveOrCreate(() => new StreamingContext(sc, Seconds(5)))    // creating the StreamingContext with 5 seconds interval\n\nval kafkaParams = Map[String, Object](\n  \"bootstrap.servers\" -> \"localhost:9092\",\n  \"key.deserializer\" -> classOf[StringDeserializer],\n  \"value.deserializer\" -> classOf[StringDeserializer],\n  \"group.id\" -> \"use_a_separate_group_id_for_each_stream\",\n  \"auto.offset.reset\" -> \"earliest\",\n  \"enable.auto.commit\" -> (false: java.lang.Boolean)\n)\n\nval topics = Array(\"my-topic\")\nval stream = KafkaUtils.createDirectStream[String, String](\n  streamingContext,\n  PreferConsistent,\n  Subscribe[String, String](topics, kafkaParams)\n)\n\n\n//stream.map(record => (record.key, record.value)).print\nval mylist = ListBuffer[String]()\n\n\nstream.foreachRDD{ rdd =>\n  if (! rdd.isEmpty()) {\n    rdd.foreachPartition{ partRec =>\n      val ieConfig = new InsightEdgeConfig(\"demo\")\n          \n      @transient lazy val spark = SparkSession.builder.insightEdgeConfig(ieConfig).getOrCreate()\n          \n      @transient lazy val ssc = spark.sparkContext\n          \n      val myKMeansModel = ssc.loadMLInstance[KMeansModel](\"KMeansModel\").get\n\n      partRec.foreach{ message =>\n\n        val arr = message.value.toString.split(\",\").map(_.trim)\n\n        val id = arr(0) + ':' + arr(1)\n          \n        val modelPrediction = myKMeansModel.predict(Vectors.dense(arr(3).toDouble, arr(4).toDouble, arr(5).toInt, arr(6).toDouble, arr(7).toDouble))\n\n        val rdd1 = ssc.parallelize(Array(new Prediction(id, arr(2), modelPrediction)))\n        \n        rdd1.saveToGrid()  \n      }\n    }  // foreach partition\n  }  // if (rdd not empty)\n}  // foreachRDD\n\n\n\n//sc.parallelize(mylist)\n\nstreamingContext.start()\n\nstreamingContext.awaitTermination()","user":"anonymous","dateUpdated":"2020-08-28T17:25:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597168918218_323854999","id":"20200811-180158_1752572840","dateCreated":"2020-08-11T18:01:58+0000","dateStarted":"2020-08-28T17:25:25+0000","dateFinished":"2020-08-28T19:57:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:379"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597429766754_394236411","id":"20200814-182926_929251315","dateCreated":"2020-08-14T18:29:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:380"},{"text":"%spark\n\npredictionsRDD.toDF().registerTempTable(\"prediction\")","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832079_1546280704","id":"20170412-105532_2084855637","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T15:12:22+0000","dateFinished":"2020-08-28T15:12:24+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:381"},{"text":"%sql\n\nselect label, cluster from prediction","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"label","index":0,"aggr":"sum"}],"values":[{"name":"cluster","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"label","index":0,"aggr":"sum"},"yAxis":{"name":"cluster","index":1,"aggr":"sum"}},"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"label":"string","cluster":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}],"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832080_1164978861","id":"20170412-105554_614414981","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T15:12:31+0000","dateFinished":"2020-08-28T15:12:36+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:382"},{"text":"%sql\n\nselect label, cluster from prediction where cluster = 1","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"label","index":0,"aggr":"sum"}],"values":[{"name":"cluster","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"label","index":0,"aggr":"sum"},"yAxis":{"name":"cluster","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832080_-1657835570","id":"20170412-105723_1802014197","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T15:12:41+0000","dateFinished":"2020-08-28T15:12:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:383"},{"text":"%sql\n\nselect label, cluster from prediction where cluster = 0","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"label","index":0,"aggr":"sum"}],"values":[{"name":"cluster","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"label","index":0,"aggr":"sum"},"yAxis":{"name":"cluster","index":1,"aggr":"sum"}},"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"label":"string","cluster":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}],"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832081_109936229","id":"20170412-105904_1711768930","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-28T15:12:44+0000","dateFinished":"2020-08-28T15:12:44+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:384"},{"text":"%md\n\n/* run following queries in gs-ui */\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 0 //1112\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 0 and label = 'DN' //77 (6.93%)\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 0 and label = 'UP' //1035 (93.07%)\n\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 1 //876\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 1 and label = 'UP' //44 (5.02%)\nselect count(*) from com.gigaspaces.demo.common.Prediction WHERE cluster = 1 and label = 'DN' //832 (94.98%)\n","user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9,"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597073832081_-739653502","id":"20170410-140226_357602155","dateCreated":"2020-08-10T15:37:12+0000","dateStarted":"2020-08-11T15:14:13+0000","dateFinished":"2020-08-11T15:14:13+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:385"},{"user":"anonymous","dateUpdated":"2020-08-28T16:41:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597074497352_-1760609784","id":"20200810-154817_823563760","dateCreated":"2020-08-10T15:48:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:386"}],"name":"stock_prediction_using_technical_indicators","id":"2FFB9H8UU","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}